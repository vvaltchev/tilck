#!/usr/bin/env bash
# SPDX-License-Identifier: BSD-2-Clause

TCC_VER="15e9b7384e709120"

function download_tcc {

   local url="git://repo.or.cz/tinycc.git"
   local ver="$TCC_VER"
   local tarname="tcc-$ver.tgz"

   download_git_repo_in_cache "$url" $ver $tarname tcc
   extract_cachefile_tar_gz $tarname --
}

if [[ $HOST_ARCH == "i386" ]] || [[ $HOST_ARCH == "x86_64" ]]; then
   all_funcs_list+=(build_tcc)
fi

function build_tcc {

   if [[ $HOST_ARCH != "i386" ]] && [[ $HOST_ARCH != "x86_64" ]]; then
      echo "ERROR: HOST_ARCH=$HOST_ARCH not supported"
      return
   fi

   if [ ! -d $ARCH/tcc ]; then

      reset_cc_vars

      if [[ "$HOST_ARCH" == "$BUILD_ARCH" ]]; then
         install_32bit_libs
      fi

      # Download the gcc toolchain even in the case HOST != BUILD_ARCH
      # because we'll need its sysroot to be deployed in Tilck's image.
      DOWNLOAD_IGNORING_SYSCC="1"
      download_gcc_toolchain
      DOWNLOAD_IGNORING_SYSCC=""
   fi


   pushd $ARCH

   if [ ! -d tcc ]; then

      show_work_on_component_msg "TCC"

      download_tcc
      cd tcc

      # Variables for making the compiler to work on Tilck
      # Note: these vars are used by --crtprefix and --libpaths
      # and do not affect the compiler in case just -c is used to
      # compile a single C file, without linking.

      local p="/"
      local lib="/lib/$ARCH_GCC_TC-tilck-musl"

      # To test it on the Linux build machine
      # local tc=$TC/host_${HOST_ARCH}/${GCC_NAME_PFX}_musl
      # local p="$tc/$ARCH/tcc/install"
      # local lib=$tc/$ARCH_GCC_TC-buildroot-linux-musl/sysroot/lib

      local ldflags="-Wl,--oformat=$ARCH_ELF_NAME -static"

      if [[ "$HOST_ARCH" == "$ARCH" ]]; then

         export SYS_CC="$CC"
         export SYS_CXX="$CXX"
         export CC_POST_FLAGS="-specs $MUSL_INSTALL/lib/musl-gcc.specs"

         # Hack: unfortunately, while tcc's build system uses the
         # just-built tcc in order to build libtcc1.a and, one of its files
         # (bcheck.c) needs to include standard headers, which most of them
         # like stdlib.h get found because of fall-back logic in the compiler,
         # but the specific ones in sys, bits and gnu don't (they are included
         # indirectly by standard headers). Therefore, the `tcc` compiler
         # fall-backs to the path specified by -B.. (pointing to the project's
         # root directory). So, one dirty hack to workaround this problem is
         # just to symlink the missing dirs in the local directory. This avoids
         # touching tcc's build system's code.
         ln -s /usr/include/$ARCH-linux-gnu/sys include/
         ln -s /usr/include/$ARCH-linux-gnu/bits include/
         ln -s /usr/include/$ARCH-linux-gnu/gnu include/

      else

         # Default case
         set_cc_vars_to_tc
      fi

      # Hack: unfortunately, the TCC build wants to build, with the
      # cross-compiler, the c2str tool, from the conftest.c file, instead of
      # using a system compiler. In other words, c2str is incompatible with the
      # cross build support (for the TinyCC itself, not its targets!). The only
      # solution appears to be at the moment to just patch the Makefile to
      # use it always just the system "gcc" to build that tool.

      sed -i -e 's/$S$(CC) -DC2STR/gcc -DC2STR/g' Makefile

      local flags="--enable-cross --cross-prefix=$ARCH_GCC_TC-linux-"
      local flags="$flags --enable-static --cpu=$ARCH"
      local af="$flags --prefix=$p --extra-ldflags='$ldflags'"
      local af="$af --crtprefix=$lib --libpaths=$lib"

      if [ -f .our_tag ]; then
         local tag=`cat .our_tag`
         local githash="$tag"
         local def_githash="-DTCC_GITHASH=\\\\\\\"${githash}\\\\\\\""
         local make_vars="DEF_GITHASH=\"$def_githash\""
      fi

      run_command2 "./configure $af" configure.log
      run_command2 "make $make_vars cross-$ARCH" build.log

      # Just to test on the local machine
      # run_command2 "make install" install.log

      # Note the configure --strip-binaries option does not work
      $ARCH_GCC_TC-linux-strip --strip-all $ARCH-tcc

   else

      show_skip_component_msg "TCC"
   fi

   popd
}

function build_tcc_installed_status {
   if [ -d $TC/$ARCH/tcc ]; then
      if [ -f $TC/$ARCH/tcc/${ARCH}-tcc ]; then
         echo "installed $ARCH"
      else
         echo "error"
      fi
   fi
}
