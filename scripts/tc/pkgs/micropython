#!/usr/bin/env bash
# SPDX-License-Identifier: BSD-2-Clause

MICROPYTHON_VER="1.13-tilck"

function download_micropython {

   local ver="$MICROPYTHON_VER"
   local tarname="micropython-$ver.tgz"
   local url="https://github.com/vvaltchev/micropython.git"

   download_git_repo_in_cache "$url" v$ver $tarname micropython
   extract_cachefile_tar_gz $tarname --
}

if [[ $HOST_ARCH == "i386" ]] || [[ $HOST_ARCH == "x86_64" ]]; then
   all_funcs_list+=(build_micropython)
fi

function build_micropython {

   if [[ $HOST_ARCH != "i386" ]] && [[ $HOST_ARCH != "x86_64" ]]; then
      echo "ERROR: HOST_ARCH=$HOST_ARCH not supported"
      return
   fi

   pushd $ARCH

   if ! [ -d micropython ]; then

      show_work_on_component_msg "MICROPYTHON"
      reset_cc_vars

      download_micropython
      cd micropython

      if [[ "$HOST_ARCH" != "$BUILD_ARCH" ]]; then

         # Case HOST_ARCH == ARCH
         # Note: if HOST_ARCH not in [BUILD_ARCH, ARCH], we fail earlier.
         #
         # Note: NOT TESTED yet.
         # Remember: this scenario (building on $ARCH) is _not_ officially
         # supported.

         export SYS_CC="$CC"
         export SYS_CXX="$CXX"
         export CC_POST_FLAGS="-specs $MUSL_INSTALL/lib/musl-gcc.specs"

      else

         # Default case
         set_cc_vars_to_tc
         export CROSS_COMPILE="${ARCH_GCC_TC}-linux-"
      fi

      export LDFLAGS_EXTRA="-static"
      local opts="MICROPY_PY_FFI=0 MICROPY_PY_THREAD=0"

      pushd mpy-cross
      run_command2 "make $opts -j$BUILD_PAR" build.log
      popd

      pushd ports/unix
      run_command2 "make submodules" make_submodules.log
      run_command2 "make $opts -j$BUILD_PAR" build.log
      popd

      export LDFLAGS_EXTRA=""
      export CROSS_COMPILE=""

   else
      show_skip_component_msg "MICROPYTHON"
   fi

   popd
}

function build_micropython_installed_status {
   if [ -d $TC/$ARCH/micropython ]; then
      if [ -f $TC/$ARCH/micropython/ports/unix/micropython ]; then
         echo "installed $ARCH"
      fi
   fi
}
