#!/usr/bin/env bash
# SPDX-License-Identifier: BSD-2-Clause

##################################
# Build GNU EFI
##################################

# Note: using a gnu-efi's fork on GitHub instead of the official SF repo:
#
#     git://git.code.sf.net/p/gnu-efi/code
#
# exclusively for performance reasons: SF sometimes is too slow for
# CI builds.

GNU_EFI_VER="3.0.14"

function download_gnu_efi {

   local ver="$GNU_EFI_VER"
   local tarname="gnu-efi-$ver.tgz"
   local url="https://github.com/vvaltchev/gnu-efi-fork.git"

   download_git_repo_in_cache "$url" $ver $tarname gnu-efi
   extract_cachefile_tar_gz $tarname --
}

function build_gnuefi_arch {

   pushd $ARCH

      if ! [ -d gnu-efi ]; then

         show_work_on_component_msg "GNU-EFI (arch: $ARCH)"
         reset_cc_vars
         download_gnu_efi
         cd gnu-efi

         if [[ "$HOST_ARCH" != "$ARCH" ]]; then
            local arch_flags="ARCH=${ARCH_EFI} prefix=${ARCH_GCC_TC}-linux-"
         else
            local arch_flags="ARCH=${ARCH_EFI}"
         fi

         run_command2 "make $arch_flags -j$BUILD_PAR" build_${ARCH_EFI}.log

      else
         show_skip_component_msg "GNU-EFI (arch: $ARCH)"
      fi

   popd
}

function build_gnuefi_build_arch {

   pushd $BUILD_ARCH

      if ! [ -d gnu-efi ]; then

         show_work_on_component_msg "GNU-EFI (arch: $BUILD_ARCH)"
         reset_cc_vars
         download_gnu_efi
         cd gnu-efi

         run_command2 \
            "make ARCH=${BUILD_ARCH} -j$BUILD_PAR" build_${BUILD_ARCH}.log

      else

         show_skip_component_msg "GNU-EFI (arch: $BUILD_ARCH)"
      fi

   popd
}

all_funcs_list+=(build_gnuefi)
function build_gnuefi {

   build_gnuefi_arch

   if [[ "$HOST_ARCH" == "$BUILD_ARCH" ]]; then
      build_gnuefi_build_arch
   fi
}

function build_gnuefi_installed_status {

   if [ -d $TC/$ARCH/gnu-efi ]; then

      local ret=""

      if [ -f $TC/$ARCH/gnu-efi/$ARCH_EFI/gnuefi/libgnuefi.a ]; then
         ret="$ret $ARCH"
      fi

      if [[ "$ARCH" != "$BUILD_ARCH" ]]; then
         if [ -f $TC/$BUILD_ARCH/gnu-efi/$BUILD_ARCH/gnuefi/libgnuefi.a ]; then
            ret="$ret $BUILD_ARCH"
         fi
      fi

      if [ -n "ret" ]; then
         echo "installed$ret"
      else
         echo "error"
      fi
   fi
}
