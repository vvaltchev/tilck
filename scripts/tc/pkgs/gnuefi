#!/usr/bin/env bash
# SPDX-License-Identifier: BSD-2-Clause

##################################
# Build GNU EFI
##################################

# Note: using a gnu-efi's fork on GitHub instead of the official SF repo:
#
#     git://git.code.sf.net/p/gnu-efi/code
#
# exclusively for performance reasons: SF sometimes is too slow for
# CI builds.

GNU_EFI_VER="3.0.17"

function download_gnu_efi {

   local ver="$GNU_EFI_VER"
   local tarname="gnu-efi-$ver.tgz"
   local url="https://github.com/vvaltchev/gnu-efi-fork.git"

   download_git_repo_in_cache "$url" $ver $tarname gnu-efi
   extract_cachefile_tar_gz $tarname --
}

#
# HACK: patch the GNU-EFI library to force CHAR16 to always be an unsigned
# short, as the L"string" literals when -fshort-wchar is used. That is necessary
# because with the custom cross musl toolchain built for host=aarch64, wchar_t
# is always defined as "int".
#
function gnuefi_patch {

   old="typedef wchar_t CHAR16"
   new="typedef unsigned short CHAR16"

   # Fix definition confusion on riscv64
   old1="typedef uint8_t                 BOOLEAN;"
   new1="typedef char       CHAR8;"

   for x in ia32 x86_64 riscv64; do
      file="inc/${x}/efibind.h"
      if ! [ -f $file ]; then
         echo "ERROR: file $file not found!"
         exit 1
      fi
      run_command "sed -i 's/${old}/${new}/' $file"
      run_command "sed -i 's/${old1}/${new1}/' $file"
   done
}

function build_gnuefi_arch {

   local arch="$1"
   local arch_efi="$2"
   local arch_tc="$3"

   pushd $arch

      if ! [ -d gnu-efi ]; then

         show_work_on_component_msg "GNU-EFI (arch: $arch)"

         if [[ "$USE_SYSCC" == 1 ]]; then
            export SYS_CC="$CC"
            export SYS_CXX="$CXX"
         fi

         reset_cc_vars
         download_gnu_efi
         pushd gnu-efi
         gnuefi_patch

         if [[ "$HOST_ARCH" != "$arch" ]]; then
            local arch_flags="ARCH=${arch_efi} prefix=${arch_tc}-linux-"
         else
            local arch_flags="ARCH=${arch_efi}"
         fi

         run_command2 "make $arch_flags -j$BUILD_PAR" build_${arch_efi}.log
         popd

      else
         show_skip_component_msg "GNU-EFI (arch: $arch)"
      fi

   popd
}

function build_gnuefi_system_compiler {

   pushd $BUILD_ARCH

      if ! [ -d gnu-efi ]; then

         show_work_on_component_msg "GNU-EFI (arch: $BUILD_ARCH)"
         reset_cc_vars
         download_gnu_efi
         pushd gnu-efi
         gnuefi_patch

         run_command2 \
            "make ARCH=${BUILD_ARCH} -j$BUILD_PAR" build_${BUILD_ARCH}.log

         popd
      else

         show_skip_component_msg "GNU-EFI (arch: $BUILD_ARCH)"
      fi

   popd
}

all_funcs_list+=(build_gnuefi)
function build_gnuefi {

   build_gnuefi_arch $ARCH $ARCH_EFI $ARCH_GCC_TC

   if [[ "$HOST_ARCH" == "$BUILD_ARCH" ]]; then
      build_gnuefi_system_compiler
   elif [[ "$HOST_ARCH" != i386 ]]; then
      build_gnuefi_arch x86_64 x86_64 x86_64
   fi
}

function build_gnuefi_installed_status {

   local arch_list=""

   for x in i386 x86_64; do

      if [ -d $TC/$x/gnu-efi ]; then
         y=$(get_efi_arch $x)
         if ! [ -f $TC/$x/gnu-efi/$y/gnuefi/libgnuefi.a ]; then
            echo "error"
            return
         fi
         arch_list="${arch_list}$x "
      fi

   done

   # Drop the trailing " "
   if [[ "${arch_list: -1}" == " " ]]; then
      arch_list="${arch_list:: -1}"
   fi

   if [ -n "$arch_list" ]; then
      echo "installed $arch_list"
   fi
}
