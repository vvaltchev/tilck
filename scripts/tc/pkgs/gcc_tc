#!/usr/bin/env bash
# SPDX-License-Identifier: BSD-2-Clause

# ---------------------------------------------------------------
# NOTE
#
# This "script" is NOT meant to be executed directly.
# It is included as a source file by scripts/build_toolchain.
#
# ---------------------------------------------------------------


###############################
# x86-i686 GNU toolchain
###############################

# $1 dir name
# $2 arch name
# $3 tc file name

function raw_gcc_tc_download {

   local dest="$1"
   local arch="$2"
   local tcname_suffix="$3"

   local tcname="${arch}--${tcname_suffix}"
   local tarname=$tcname.tar.bz2
   local url=http://toolchains.bootlin.com/downloads/releases/toolchains

   download_file_in_cache "$url/$arch/tarballs" "$tarname"
   extract_cachefile_tar_bz "$tarname" $tcname $dest
}

function gcc_x86_glibc_patch {

   # To make musl-gcc happy
   pushd ${GCC_NAME_PFX}_glibc/bin

   for x in *; do
      if [[ $x == i686* ]]; then
         new_name=$(echo $x | sed 's/i686/i386/g')
         ln -s $x $new_name
      fi
   done

   for x in *; do
      if [[ $x == i386-linux-* ]]; then
         new_name=$(echo $x | sed 's/i386-linux-/i386-/g')
         ln -s $x $new_name
      fi
   done

   popd
}

# $1: libc name
function download_gcc_tc_internal {

   local libc="$1"
   pushd host_${BUILD_ARCH}

   if ! [ -d ${GCC_NAME_PFX}_${libc} ]; then

      show_work_on_component_msg "GCC TOOLCHAIN ($ARCH - $libc)"

      raw_gcc_tc_download                    \
         "${GCC_NAME_PFX}_${libc}"           \
         "$ARCH_GCC_TC_CODENAME"             \
         "$libc--$ARCH_GCC_TC_VER"

      if [[ "$libc" == "glibc" && "$ARCH" == "i386" ]]; then
         gcc_x86_glibc_patch
      fi

      local gcc=${GCC_NAME_PFX}_${libc}/bin/$ARCH_GCC_TC-linux-gcc

      if ! [ -f $gcc ]; then
         echo "ERROR (download_gcc_tc_internal): file $gcc NOT found."
         exit 1
      fi

      if [[ "$HOST_ARCH" == "$BUILD_ARCH" ]]; then

         local ver=$(generic_get_version_str $gcc)
         echo "Detected GCC toolchain version: '$ver'"

         if [[ "$ver" != "$GCC_TC_VER" ]]; then
            echo "ERROR: gcc version doesn't match expected ($GCC_TC_VER)"
            exit 1
         fi
      fi

   else
      show_skip_component_msg "GCC TOOLCHAIN ($ARCH - $libc)"
   fi

   popd
}

############################################################

all_funcs_list+=(download_gcc_toolchain)
function download_gcc_toolchain {

   if [[ "$ARCH" == "i386" ]]; then

      if [[ "$DOWNLOAD_IGNORING_SYSCC" != 1 && "$USE_SYSCC" == 1 ]]; then
         echo "NOTE: Skipping download_gcc_toolchain because USE_SYSCC=1"
         return 0
      fi

      download_gcc_tc_internal musl

   else
      echo "Architecture '$ARCH' not supported."
      exit 1
   fi
}

function download_gcc_toolchain_installed_status {
   if [ -d $TC/host_${BUILD_ARCH}/${GCC_NAME_PFX}_musl ]; then
     echo "installed"
   fi
}


all_funcs_list+=(download_gcc_glibc_toolchain)
function download_gcc_glibc_toolchain {

   pushd $TC

   if [[ "$ARCH" == "i386" ]]; then
      download_gcc_tc_internal glibc
   else
      echo "Architecture '$ARCH' not supported."
      exit 1
   fi

   popd
}

function download_gcc_glibc_toolchain_installed_status {
   if [ -d $TC/host_${BUILD_ARCH}/${GCC_NAME_PFX}_glibc ]; then
     echo "installed"
   fi
}
