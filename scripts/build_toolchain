#!/usr/bin/env bash
# SPDX-License-Identifier: BSD-2-Clause

# GLOBAL VARIABLES

# Reset any forced env-based CFLAGS
export CFLAGS=""
export FFLAGS=""
export CXXFLAGS=""
export CFFLAGS=""

if [[ "$ARCH" == "" ]]; then
   export ARCH="i386" # default target arch
fi

# Default GCC toolchain version to use. Unfortunately, it depends on the target
# architecture, because the list of available pre-built toolchains on
# https://toolchains.bootlin.com depends on the architecture.

if [[ "$ARCH" == "i386" ]]; then

   DEFAULT_GCC_TC_VERSION="8.4.0"
   ARCH_GCC_TC="i686"

elif [[ "$ARCH" == "x86_64" ]]; then

   DEFAULT_GCC_TC_VERSION="8.4.0"
   ARCH_GCC_TC="x86_64"

elif [[ "$ARCH" == "riscv64" ]]; then

   DEFAULT_GCC_TC_VERSION="12.3.0"
   ARCH_GCC_TC="riscv64"

else
   echo "Architecture '$ARCH' not supported."
   exit 1
fi


# Project's root directory
SOURCE_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
MAIN_DIR="$(cd "$SOURCE_DIR/.." && pwd)"

if [[ "$MAIN_DIR" = *" "* ]]; then
   echo "The Tilck source must be checked out in a path *WITHOUT* spaces"
   echo "Current path: '$MAIN_DIR'"
   exit 1
fi

# Global toolchain directory

if [ -z "$TCROOT_PARENT" ]; then
   TCROOT_PARENT="$MAIN_DIR"
fi

if [ -z "$TCROOT" ]; then
   TCROOT="$TCROOT_PARENT/toolchain2"
fi

TC="$TCROOT"

# Constants
BUILD_ARCH="x86_64" # the only arch accepted for the build machine

# Arch-variables

HOST_ARCH="`uname -m`"

if [[ "$HOST_ARCH" == "x86_64" ]]; then

   : # Great, that's what we expect: do nothing

elif [[ "$HOST_ARCH" == "amd64" ]]; then

   # An alias for x86_64: fix our variable
   HOST_ARCH="x86_64"

elif [[ "$HOST_ARCH" == "i686" ]]; then

   # Special case, not "officially" supported.
   # We need to set HOST_ARCH to "i386", to match the convention
   # used by ARCH and ld.

   HOST_ARCH="i386"
fi

# ARCH and ARCH_* variables are all about the TARGET architecture

if [ -z "$GCC_TC_VER" ]; then

   if [ -f $TC/.gcc_tc_ver_$ARCH ]; then

      GCC_TC_VER=$(cat $TC/.gcc_tc_ver_$ARCH)

   else

      if [ -f $TC/.gcc_tc_ver ]; then

         # TODO: drop this once we upgrade to toolchain3

         if [[ "$ARCH" == "i386" ]]; then
            # Small hack to support older toolchains
            GCC_TC_VER=$(cat $TC/.gcc_tc_ver)
         fi

         # Upgrade the toolchain to the latest format
         if [[ "$RUNNING_IN_CI" != "1" ]]; then

            # Keep the old .gcc_tc_ver file to support building older commits
            cp $TC/.gcc_tc_ver $TC/.gcc_tc_ver_i386
         fi
      fi
   fi
fi

if [ -z "$GCC_TC_VER" ]; then
   GCC_TC_VER="$DEFAULT_GCC_TC_VERSION"
fi

#
# Given an architecture name using Linux's convention, return the EFI name
# for the same architecture. The result is the same for almost all architectures
# except for "i386" which becomes "ia32".
#
function get_efi_arch {

   local ret="$1"

   if [[ "$ret" == i386 ]]; then
      ret="ia32"
   fi

   echo "$ret"
}

#
# Support for AARCH64 as build machine (limited)
#
if [[ "$HOST_ARCH" == "aarch64" ]]; then
   GCC_TC_VER="9.4.0"
   ARCH_GCC_TC_VER="custom"
fi

if [[ "$ARCH" == "i386" ]]; then

   ARCH_SHORT="x86"
   ARCH_FAMILY="generic_x86"
   ARCH_ELF_NAME="elf32-i386"
   ARCH_LD_OUTPUT="elf_i386"
   ARCH_EFI=$(get_efi_arch $ARCH)
   ARCH_GCC_TC="i686"
   ARCH_GCC_FLAGS="-m32 -march=$ARCH_GCC_TC"
   ARCH_GCC_TC_CODENAME="x86-i686"

elif [[ "$ARCH" == "x86_64" ]]; then

   ARCH_SHORT="x86_64"
   ARCH_FAMILY="generic_x86"
   ARCH_ELF_NAME="elf64-x86-64"
   ARCH_LD_OUTPUT="elf_x86_64"
   ARCH_EFI=$(get_efi_arch $ARCH)
   ARCH_GCC_TC="x86_64"
   ARCH_GCC_FLAGS="-m64"
   ARCH_GCC_TC_CODENAME="x86-64-core-i7"

elif [[ "$ARCH" == "riscv64" ]]; then

   ARCH_SHORT="riscv64"
   ARCH_FAMILY="riscv"
   ARCH_ELF_NAME="elf64-littleriscv"
   ARCH_LD_OUTPUT="elf64lriscv"
   ARCH_GCC_TC="riscv64"
   ARCH_GCC_FLAGS=""
   ARCH_GCC_TC_CODENAME="riscv64-lp64d"

else
   echo "Architecture '$ARCH' not supported."
   exit 1
fi

#
# If $ARCH_GCC_TC_VER has not been set externally or by the check above,
# we'll use the pre-built bootlin toolchains, which do not use the GCC
# version in their name, but a year/month combination with additional
# fields. Therefore, let's map our desired GCC version to the bootlin
# toolchain name.
#
if [[ "$ARCH_GCC_TC_VER" == "" ]]; then
   case $GCC_TC_VER in
      6.4.0) ARCH_GCC_TC_VER="stable-2018.02-2";;
      7.3.0) ARCH_GCC_TC_VER="stable-2018.11-1";;
      8.4.0) ARCH_GCC_TC_VER="stable-2020.02-2";;
      9.3.0) ARCH_GCC_TC_VER="stable-2020.08-1";;
      10.3.0) ARCH_GCC_TC_VER="stable-2021.11-1";;
      11.3.0) ARCH_GCC_TC_VER="stable-2022.08-1";;
      12.3.0) ARCH_GCC_TC_VER="stable-2024.02-1";;
      *) echo "ERROR: unknown ARCH_GCC_TC_VER for GCC $GCC_TC_VER"; exit 1;;
   esac
fi

if ! [ -f $TC/.gcc_tc_ver_$ARCH ]; then

   mkdir -p $TC
   echo -n $GCC_TC_VER > $TC/.gcc_tc_ver_$ARCH

else

   saved=$(cat $TC/.gcc_tc_ver_$ARCH)
   v=$GCC_TC_VER

   if ! [ "$GCC_TC_VER" = "$saved" ]; then
      echo "WARNING: GCC_TC_VER ($v) does not match with saved one ($saved)"
      echo "WARNING: This is NOT a supported scenario. Please delete:"
      echo "   $TC/$ARCH"
      echo "   $TC/.gcc_tc_ver_$ARCH"
      echo "And run this script again to use the new toolchain."
      exit 1
   fi
fi


# Compute $GCC_TC_VER_ from the base $GCC_TC_VER (e.g. "1.2.3" -> "1_2_3")
GCC_TC_VER_=$(echo $GCC_TC_VER | sed -E 's/[.]/_/g')
GCC_NAME_PFX="gcc_${GCC_TC_VER_}_${ARCH}"
MUSL_INSTALL=$TC/$ARCH/musl/install

echo
echo "ARCH=$ARCH"
echo "HOST_ARCH=$HOST_ARCH"
echo "GCC_TC_VER=$GCC_TC_VER"
echo "ARCH_GCC_TC_VER=$ARCH_GCC_TC_VER"
echo "USE_SYSCC=$USE_SYSCC"
echo "CC=$CC"
echo "CXX=$CXX"
echo

function save_cc_vars {

   if [[ "$HOST_ARCH" == "$ARCH" ]]; then

      if [ -z "$AR" ]; then
         export AR="ar"
      fi

      if [ -z "$NM" ]; then
         export NM="nm"
      fi

      if [ -z "$RANLIB" ]; then
         export RANLIB="ranlib"
      fi
   fi

   saved_CC=$CC
   saved_CXX=$CXX
   saved_AR=$AR
   saved_NM=$NM
   saved_RANLIB=$RANLIB
}

function set_cc_vars_to_tc {

   export CC="${ARCH_GCC_TC}-linux-gcc"
   export CXX="${ARCH_GCC_TC}-linux-g++"
   export AR="${ARCH_GCC_TC}-linux-ar"
   export NM="${ARCH_GCC_TC}-linux-nm"
   export RANLIB="${ARCH_GCC_TC}-linux-ranlib"
}

function reset_cc_vars_to_null {

   export CC=""
   export CXX=""
   export AR=""
   export NM=""
   export RANLIB=""
}


function reset_cc_vars {

   export CC=$saved_CC
   export CXX=$saved_CXX
   export AR=$saved_AR
   export NM=$saved_NM
   export RANLIB=$saved_RANLIB
}

all_funcs_list=()

# Source files to include
source $MAIN_DIR/scripts/bash_includes/script_utils

function arch_checks {

   if [[ "$HOST_ARCH" != *"$BUILD_ARCH"* ]]; then

      echo "WARNING: Tilck is designed to be built only on $BUILD_ARCH host "
      echo "machines no matter which target architecture has been chosen. "
      echo "Reason: the build system uses a toolchain pre-compiled for "
      echo "$BUILD_ARCH hosts."
      echo
      echo "Detected HOST_ARCH (uname -m): $HOST_ARCH"
      echo
      echo "However, there is *unofficial* support for the following"
      echo "alternative scenarios: "
      echo
      echo "   1. HOST_ARCH == ARCH"
      echo "   2. HOST_ARCH == aarch64"
      echo
      echo "Scenario 1. requires the environment variables USE_SYSCC, CC and "
      echo "CXX to be set correctly. Scenario 2 is will download and build"
      echo "a whole cross-gcc toolchain for the selected ARCH".
      echo

      if [[ "$HOST_ARCH" == "$ARCH" ]]; then

         if [[ "$USE_SYSCC" == 1 ]]; then

            echo "In this case, HOST_ARCH == ARCH and USE_SYSCC is set."
            echo "The script can continue, but WARNING: this scenario is not "
            echo "tested as often as the main one (building on $BUILD_ARCH)."
            echo ""
            echo -n "Proceed [Y/n] ? "

            read ans

            if [[ "$ans" == "" || "$ans" == "y" || "$ans" == "Y" ]]; then
               echo "OK."
            else
               echo "Aborted."
               exit 1
            fi

         else

            echo "In this case USE_SYSCC, CC and CXX are NOT set."
            echo "Unable to continue."
            exit 1
         fi

      elif [[ "$HOST_ARCH" == "aarch64" ]]; then

         echo "This scenario is absolutely EXPERIMENTAL and will require"
         echo "the download and the build of a custom cross GCC toolchain"
         echo ""
         echo -n "Proceed [Y/n] ? "

         read ans

         if [[ "$ans" == "" || "$ans" == "y" || "$ans" == "Y" ]]; then
            echo "OK."
         else
            echo "Aborted."
            exit 1
         fi

      else

         echo "In this case, HOST_ARCH ($HOST_ARCH) != ARCH ($ARCH)"
         echo "Unable to continue."
         exit 1
      fi
   fi
}

function compiler_checks {

   if [[ "$USE_SYSCC" == 1 ]]; then

      if [[ "$CC" == "" || "$CXX" == "" ]]; then

         echo "WARNING: CC and CXX should both be set when USE_SYSCC=1."
         echo -n "Do you want just to use gcc and g++? [Y/n] "
         read ans

         if [[ "$ans" == "" || "$ans" == "y" || "$ans" == "Y" ]]; then

            echo "----------------------------------------------------------"
            echo "Setting:"
            echo "   CC=gcc"
            echo "   CXX=g++"
            echo ""
            export CC="gcc"
            export CXX="g++"

         else

            echo "Aborted."
            exit 1
         fi
      fi

      local cc_compiler="`$CC --version | cut -d ' ' -f 1 | head -1`"
      local cxx_compiler="`$CXX --version | cut -d ' ' -f 1 | head -1`"

      if [ -z "$cc_compiler" ]; then
         echo "ERROR: $CC compiler NOT FOUND"
         exit 1
      fi

      if [ -z "$cxx_compiler" ]; then
         echo "ERROR: $CXX compiler NOT FOUND"
         exit 1
      fi

      if [ "$cc_compiler" != "gcc" ]; then
         echo "ERROR: USE_SYSCC=1 is NOT supported with compilers != GCC."
         exit 1
      fi

   fi
}

function print_func {

   local fname="$1"
   local has_printf="$2"
   local is_default="$3"
   local def=""

   if [[ $is_default = 1 ]]; then
      def=" (*)"
   fi

   if [[ $has_printf = 1 ]]; then

      local attrs=""
      local extra_info=""
      local installed_func="${fname}_installed_status"

      if [[ "$(type -t $installed_func)" == 'function' ]]; then

         local status="$(eval $installed_func)"

         if [[ -n "$status" ]]; then

            if [[ "$status" =~ installed* ]]; then

               if ! [[ "$status" = "installed" ]]; then

                  extra_info=$(echo "$status" | cut -d ' ' -f 2-)
                  status="installed"
               fi
            fi

            status=$(printf "%-9s" "$status")
         fi

         case "$status" in

            installed*)
               status="$GREEN${status}$RATTRS"
            ;;

            error*)
               status="$RED${status}$RATTRS"
            ;;

            skipped*)
               status="$YELLOW${status}$RATTRS"
            ;;

         esac

         if [[ -n "$status" ]]; then
            attrs="$attrs[ $status ]"
         fi

         if [[ -n "$extra_info" ]]; then
            attrs="$attrs[ $extra_info ]"
         fi
      fi

      printf "%-35s $attrs\n" "$fname$def"

   else

      echo "   - $1 $def"
   fi
}

function show_help {

   echo ""
   echo "Syntax:"
   echo "      $0 [-n]                             run default functions"
   echo "      $0 -s func1 [func2 [func3 [...]]]   run specific functions"
   echo ""
   echo "   -n        Do not check nor install system packages (advanced)"
   echo "                Even if many packages are downloaded & built by this"
   echo "                script without touching the system, some packages are"
   echo "                required to be installed in the system. For example: "
   echo "                wget, git, make, binutils, bzip2, rpmextract and "
   echo "                others similar. When -n is NOT passed, the script "
   echo "                first tries to detect the current Linux distribution "
   echo "                and then it checks if all the required packages are "
   echo "                already installed. In case some packages need to be "
   echo "                installed, this script will show a list and run: "
   echo "                    sudo <package manager> install [pkg1 [pkg2 ...]]"
   echo "                In case the user does not want this script to install "
   echo "                the necessary packages he/she could just interrupt "
   echo "                this script with Ctrl+C, without affecting the "
   echo "                system."
   echo
   echo "   --clean   Remove everything from the toolchain, except the cache"
   echo ""
   echo "Functions supported by this script (with -s):"
   echo ""

   local has_printf=0
   local all_def_funcs=" ${default_funcs[*]} "

   if printf "" &> /dev/null; then
      has_printf=1
   fi

   for x in ${default_funcs[@]}; do
      print_func "$x" $has_printf 1
   done

   for x in ${all_funcs_list[@]}; do

      if [[ "$all_def_funcs" =~ " ${x} " ]]; then
         continue 2
      fi

      # Skip the config_* functions, in order to print them last
      if [[ "$x" =~ config_* ]]; then
         continue 2
      fi

      print_func "$x" $has_printf 0
   done

   # Now print all the config_* funcs
   for x in ${all_funcs_list[@]}; do
      if [[ "$x" =~ config_* ]]; then
         print_func "$x" $has_printf 0
      fi
   done

   echo ""
   echo -e "(*) Functions ran by default\n"
}

function show_error_no_func {
   echo "ERROR: The function '$1' does not exist. Re-run with --help."
}

function execute_func {

   if [ -n "$(type -t $1)" ] && [ "$(type -t $1)" = function ]; then

      echo "[build_toolchain] Executing single function '$1'"
      $1
      echo "[build_toolchain] Executing single function: DONE"

      return 0

   else

      return 1  # No such function
   fi
}

function check_func {

   local func="$1"

   for x in ${all_funcs_list[@]}; do
      if [[ "$x" == "$func" ||
            "$x" == "build_$func" ||
            "$x" == "download_$func" ]]
      then
         return 0
      fi
   done

   return 1 # Function not found
}

function perform_full_clean {

   echo "*** TOOLCHAIN CLEAN ***"
   if ! [ -d "$TC" ]; then
      exit 0
   fi

   cd "$TC"
   for x in *; do
      if [[ "$x" != "cache" ]]; then
         echo "Deleting '$x'..."
         rm -rf "$x"
      fi
   done
   rm -f .gcc_tc_ver_*
   echo "DONE"
   exit 0
}


##########################################################
#
# MAIN
#
##########################################################

function main {

   if [[ "$1" == "--clean" ]]; then
      perform_full_clean
   fi

   default_funcs=()

   if [[ "$HOST_ARCH" == "$BUILD_ARCH" ]]; then

      # Default case: we're building on a x86-64 machine
      default_funcs+=(download_gcc_toolchain)

      if [[ "$USE_SYSCC" == 1 ]]; then
         # Even we're building on a x86-64 machine, if the system compiler
         # was requested, we need to also build libmusl.
         default_funcs+=(build_libmusl)
      fi

   elif [[ "$HOST_ARCH" == "$ARCH" ]]; then
      # We don't have our pre-build gcc-musl toolchains for HOST_ARCH, therefore
      # we *must* build also libmusl, in order to link with musl programs
      # compiled with the system compiler.
      default_funcs+=(build_libmusl)
   elif [[ "$HOST_ARCH" == "aarch64" ]]; then
      default_funcs+=(custom_gcc_cross_tc)
   fi

   if [[ "$HOST_ARCH" == "x86_64" ]]; then
      default_funcs+=(download_cmake)
   fi

   default_funcs+=(build_gnuefi)
   default_funcs+=(build_mtools)
   default_funcs+=(build_zlib)

   if [ -z "$NO_BUSYBOX" ]; then
      default_funcs+=(build_busybox)
   fi

   if [[ "$ARCH" == "riscv64" ]]; then
      default_funcs+=(build_u_boot)
      default_funcs+=(build_libfdt)
   fi

   if [[ "$1" == "--help" || "$1" == "-h" ]]; then
      show_help
      exit 0
   fi

   # Compiler-related checks
   compiler_checks
   # Arch-related checks
   arch_checks
   # Save the current values of CC, CXX and related
   save_cc_vars

   # Exit on the first failure
   set -e

   export PATH="$MAIN_DIR/scripts/build_scripts:$PATH"
   local ha=$TC/host_${HOST_ARCH}

   if [[ "$USE_SYSCC" != 1 ]] || [[ "$HOST_ARCH" != "$ARCH " ]]; then
      GCC_TOOLCHAIN=$ha/${GCC_NAME_PFX}_musl/bin # Default cross-compiler
      GCC_TOOLCHAIN_GLIBC=$ha/${GCC_NAME_PFX}_glibc/bin # glibc cross-compiler
   fi

   if [[ "$USE_SYSCC" != 1 ]]; then

      # NOTE: GCC's musl pre-built toolchain overrides build_scripts/* in PATH.
      # This means that, when HOST_ARCH == BUILD_ARCH, i686-linux-gcc will use
      # its version and NOT the wrapper script in build_scripts which simulates
      # its behavior using -m32 and -specs.
      export PATH="$GCC_TOOLCHAIN:$PATH"
      local gcc_x86_64_bin="$ha/gcc_${GCC_TC_VER_}_x86_64_musl/bin"

      if [ -d $gcc_x86_64_bin ] || [[ "$HOST_ARCH" == "aarch64" ]]; then
         # Also export the x86_64 cross-toolchain if it exists or if the host
         # is aarch64 since on that architecture, we need both the i386 and the
         # x86_64 toolchain in any case.
         export PATH="$ha/gcc_${GCC_TC_VER_}_x86_64_musl/bin:$PATH"
      fi

      unset gcc_x86_64_bin
      unset ha
   fi


   if [ "$1" == "-s" ] && ! [ -d $TC/$ARCH ]; then

      echo
      echo "ERROR: directory $TC/$ARCH not found."
      echo
      echo "It is necessary to run this script *without* options first to "
      echo "download and build a minimum toolchain. Then, it will be possible"
      echo "to download and build the extra packages."
      echo
      echo "For more info: "
      echo "   https://github.com/vvaltchev/tilck/blob/master/docs/building.md"

      exit 1
   fi

   mkdir -p $TC
   mkdir -p $TC/cache
   mkdir -p $TC/noarch
   mkdir -p $TC/i386
   mkdir -p $TC/x86_64
   mkdir -p $TC/riscv64

   if [[ "$HOST_ARCH" == "aarch64" ]]; then
      mkdir -p $TC/host_aarch64
   else
      mkdir -p $TC/host_i386
      mkdir -p $TC/host_x86_64
   fi

   cd $TC

   if ! [ -L host ]; then
      ln -s host_${HOST_ARCH} host
   fi

   # Set the CMAKE variable in order to single functions to be able to use it
   if [ -f $TC/host_$HOST_ARCH/cmake/bin/cmake ]; then
      CMAKE=$TC/host_$HOST_ARCH/cmake/bin/cmake
   else
      CMAKE=cmake
   fi


   if [ "$1" == "-s" ]; then

      if [ $# -lt 2 ]; then
         echo "Expected the name of the function to call after the $1 option"
      fi

      shift  # Drop the first argument, $1

      for func in "$@"; do

         if ! check_func "$func"; then
            show_error_no_func "$func"
            exit 1
         fi

         if ! execute_func $func; then
            if ! execute_func "build_$func"; then
               if ! execute_func "download_$func"; then
                  show_error_no_func "$func"
                  exit 1
               fi
            fi
         fi

      done
      exit 0
   fi

   # Single-option parsing

   if [ "$1" == "-n" ] || [ "$1" == "--skip-install-pkgs" ]; then
      local skip_install=1
   fi

   # Do the actual job

   if [ -z "$skip_install" ]; then
      install_packages
   else
      echo "*** SKIPPING installation of packages"
   fi

   echo
   echo "*** Building the custom toolchain ***"
   echo

   for x in ${default_funcs[@]}; do
      $x
   done

   echo
   echo "*** Building custom toolchain COMPLETED ***"
   echo
}

##########################################################
# Entry point: load package funcs and run main()
##########################################################

for x in $MAIN_DIR/scripts/tc/pkgs/*; do
   source $x
done

if command -v sort &> /dev/null 2>&1; then
   IFS=$'\n'
   all_funcs_list=($(sort <<<"${all_funcs_list[*]}"))
   unset IFS
fi

main "$@"
