#!/usr/bin/env python3
# SPDX-License-Identifier: BSD-2-Clause

import os
import sys
import subprocess
from typing import List, Optional, Dict, Tuple, Any

# Constants

fileTypes = [
   "C (source)",
   "C/C++ (header)",
   "C++ (source)",
   "Assembly",
   "Python",
   "CMake",
   "Shell script"
]

extToType = {
   ".c": "C (source)",
   ".h": "C/C++ (header)",
   ".cpp": "C++ (source)",
   ".cc": "C++ (source)",
   ".cxx": "C++ (source)",
   ".py": "Python",
   ".asm": "Assembly",
   ".S": "Assembly",
   ".cmake": "CMake",
   ".sh": "Shell script"
}

excludedDirs = [
   "docs",
   "3rd_party",
   "build",
   "other_builds",
   "tcci_builds",
   "sysroot",
   "toolchain",
   "system_headers",
   "vim_text_files",
   "/acpica/",
   ".git",
   ".vscode",
]

excludedFiles = [
   "pci_classes.c.h",
   "pci_vendors.c.h",
]

PREFIX = " " * 3
FLEN = [ 15, 8, 8, 8 ] # fields length
LINE_MAX_COLS = 80
#####################################################
# Global variables

optPrintFileNames = False
optShowLongLines = False
optCheckLineEnding = False

longLines: Dict[str, List[Tuple[int, int]]] = {} # file -> list of (line#, cols)
nonUnixLeFiles = set()
#####################################################

def GetNoExtFileType(fpath: str) -> Optional[str]:

   out = subprocess.check_output(['file', fpath]).decode('utf-8')

   if out.find("shell script") != -1:
      return "Shell script"

   if out.find("Python script") != -1:
      return "Python"

   return None

def GetFileType(f: str, folder: str) -> Optional[str]:

   if f == "CMakeLists.txt":
      return "CMake"

   #pylint: disable=unused-variable
   fname, fext = os.path.splitext(f)

   if fext == "":
      return GetNoExtFileType(os.path.join(folder, f))

   if not fext in extToType:
      return None

   return extToType[fext]


def CountLinesInFile(f: str, ft: str) -> List[int]:

   global longLines
   global nonUnixLeFiles
   res = [0, 0] # tot lines, empty lines

   if optPrintFileNames:
      print(("file: {0}   -> {1}".format(f, ft)))

   with open(f, 'r') as fd:

      for i, line in enumerate(fd):

         le = line[-2:]

         if len(le) == 2 and (le == '\r\n' or le == '\n\r'):
            nonUnixLeFiles.add(f)
         elif len(le) == 1 and le[0] != '\n':
            nonUnixLeFiles.add(f)

         rsline = line.rstrip() # right strip
         sline = rsline.strip() # full strip

         if len(rsline) > LINE_MAX_COLS:
            if not f in longLines:
               longLines[f] = []

            longLines[f].append( (i+1, len(rsline)) )

         res[0] += 1

         if not sline:
            res[1] += 1

   return res

def IsDirExcluded(path: str) -> bool:

   if os.path.basename(path) == 'build_apps':
      return False

   for e in excludedDirs:
      if path.find(e) != -1:
         return True

   return False

def IsFileExcluded(fname: str) -> bool:
   return fname in excludedFiles

def AccumulateCounters(destArr: Dict[str, int], arr: Dict[str, int]):

   for ft in fileTypes:
      destArr[ft] += arr[ft]

def PrintRow(cols: List[Any]) -> None:

   s = PREFIX

   for i, val in enumerate(cols):

      if i == 0:
         s += str(val).ljust(FLEN[i]) + " "
      else:
         s += str(val).rjust(FLEN[i]) + " "

   print(s)

def GetEmptyPercStr(t: int, e: int) -> str:
   return str(round(100.0 * e/t, 1)) + "%"

def PrintCounters(arr, eArr, total: int, eTot: int) -> None:

   PrintRow(["File type", "Tot", "Empty", "Empty%"])

   for ft in fileTypes:

      vals = [ arr[ft], eArr[ft] ]

      if vals[0] > 0:
         PrintRow([ft] + vals + [GetEmptyPercStr(vals[0], vals[1])])

   print(("-" * 50))
   PrintRow(["Total:", total, eTot, GetEmptyPercStr(total, eTot)])
   print("")

def main():

   global optPrintFileNames
   global optShowLongLines
   global optCheckLineEnding

   if len(sys.argv) > 1 and sys.argv[1] == '-v':
      optPrintFileNames = True
      del sys.argv[1]

   if len(sys.argv) > 1 and sys.argv[1] == '-l':
      optShowLongLines = True
      del sys.argv[1]

   if len(sys.argv) > 1 and sys.argv[1] == '-e':
      optCheckLineEnding = True
      del sys.argv[1]

   if len(sys.argv) > 1:
      destDirs = sys.argv[1:]
   else:
      destDirs = ["."]

   gLinesCount = {ft: 0 for ft in fileTypes}
   gEmptyLinesCount = {ft: 0 for ft in fileTypes}

   gTotal = 0
   gEmptyTotal = 0

   print("") # print an empty line

   for destDir in destDirs:

      if not os.path.isdir(destDir) or IsDirExcluded(destDir):
         continue

      linesByType = {t: 0 for t in fileTypes}
      emptyLinesByType = {t: 0 for t in fileTypes}
      total = 0
      emptyTotal = 0

      for folder, subfolders, files in os.walk(destDir):

         if IsDirExcluded(folder):
            continue

         for f in files:

            if IsFileExcluded(f):
               continue

            ft = GetFileType(f, folder)

            if ft is not None:

               c = CountLinesInFile(os.path.join(folder, f), ft)

               linesByType[ft] += c[0]
               emptyLinesByType[ft] += c[1]
               total += c[0]
               emptyTotal += c[1]
               gTotal += c[0]
               gEmptyTotal += c[1]


      print(("Number of lines in '{0}':".format(destDir)))
      AccumulateCounters(gLinesCount, linesByType)
      AccumulateCounters(gEmptyLinesCount, emptyLinesByType)
      PrintCounters(linesByType, emptyLinesByType, total, emptyTotal)

   if len(destDirs) > 1:
      print("\nCumulative number of lines:")
      PrintCounters(gLinesCount, gEmptyLinesCount, gTotal, gEmptyTotal)

   if optShowLongLines:
      if longLines:
         print("\nLong lines")
         print(("-" * 80))
         for f in longLines:
            for lines in longLines[f]:
               print(("{0: <69} [{1: >3} cols]".\
                     format(f + ":" + str(lines[0]), lines[1])))
      else:
         print("\nLong lines: NONE")

   if optCheckLineEnding:
      if nonUnixLeFiles:
         print("\nFiles with non-UNIX line ending:")
         for f in nonUnixLeFiles:
            print(("  - {0}".format(f)))
         print("")
      else:
         print("\nFiles with non-UNIX line ending: NONE")

#########################################################
if __name__ == "__main__":
   main()
